{"version":3,"file":"component---src-pages-user-profile-js-33372e274f073089ab6f.js","mappings":"sMA8FA,UAzFwBA,KACpB,MAAM,KAAEC,EAAI,QAAEC,IAAYC,EAAAA,EAAAA,MACpB,EAACC,EAAQ,EAAEC,IAAeC,EAAAA,EAAAA,UAASL,GAAQ,CAAC,IAC5C,EAACM,EAAQ,EAAEC,IAAeF,EAAAA,EAAAA,WAASL,aAAI,EAAJA,EAAMM,WAAY,KACrD,EAACE,EAAW,EAAEC,IAAkBJ,EAAAA,EAAAA,UAAS,IAG/CK,EAAAA,EAAAA,YAAU,KAEN,MAAMC,EAAc,IAAKR,EAAUG,YACnCL,EAAQU,GACRC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUJ,GAAa,GAC1D,CAACL,EAAUH,EAAUF,IAExB,MAAMe,EAAqBC,IACvB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAMG,OAC9BhB,EAAY,IAAKD,EAAU,CAACe,GAAOC,GAAQ,EAmBzCE,EA9BiB,EA8BGb,EACpBc,EAAqBD,EA/BJ,EAgCjBE,EAAiBjB,EAASkB,MAAMF,EAAoBD,GAI1D,OACII,EAAAA,cAACC,EAAAA,EAAM,KACHD,EAAAA,cAAA,UAAI,gBACJA,EAAAA,cAAA,QAAME,SAzBQV,IAClBA,EAAMW,iBACN3B,EAAQE,GACR0B,MAAM,gCAAgC,GAuB9BJ,EAAAA,cAAA,WACIA,EAAAA,cAAA,SAAOK,QAAQ,QAAO,SACtBL,EAAAA,cAAA,SAAOM,GAAG,OAAOC,KAAK,OAAOd,KAAK,OAAOC,MAAOhB,EAASe,KAAMe,SAAUjB,KAE7ES,EAAAA,cAAA,WACIA,EAAAA,cAAA,SAAOK,QAAQ,SAAQ,UACvBL,EAAAA,cAAA,SAAOM,GAAG,QAAQC,KAAK,QAAQd,KAAK,QAAQC,MAAOhB,EAAS+B,MAAOD,SAAUjB,KAEjFS,EAAAA,cAAA,WACIA,EAAAA,cAAA,SAAOK,QAAQ,SAAQ,UACvBL,EAAAA,cAAA,SAAOM,GAAG,QAAQC,KAAK,MAAMd,KAAK,QAAQC,MAAOhB,EAASgC,MAAOF,SAAUjB,KAE/ES,EAAAA,cAAA,WACIA,EAAAA,cAAA,SAAQK,QAAQ,mBAAkB,qBAClCL,EAAAA,cAAA,SAAQM,GAAG,kBAAkBC,KAAK,OAAOd,KAAK,kBAAkBC,MAAOhB,EAASiC,gBAAiBH,SAAUjB,KAE/GS,EAAAA,cAAA,UAAQO,KAAK,UAAS,iBAG1BP,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,OAAKY,MAAO,CAAEC,QAAS,OAAQC,SAAU,SACpChB,EAAeiB,KAAIC,IAChB,MAAMC,EArCID,IACfE,EAAAA,EAAoBC,MAAKF,GAAUA,EAAOX,KAAOU,IAoC7BI,CAAiBJ,GAChC,OACIhB,EAAAA,cAAA,OAAKqB,IAAKL,EAAUJ,MAAO,CAAEU,KAAM,UAAWC,OAAQ,SAClDvB,EAAAA,cAAA,SAAIiB,EAAOO,QAAQ,MAAIP,EAAOQ,cAAc,OAAKR,EAAOS,OACxD1B,EAAAA,cAAA,UAAQ2B,QAASA,IA9CPX,KAC9BlC,EAAYD,EAAS+C,QAAOtB,GAAMA,IAAOU,IAAU,EA6CRa,CAAyBb,IAAW,UACzD,KAMlBhB,EAAAA,cAAA,YACK8B,EAAAA,EAAAA,GAAIC,MAAMC,KAAKC,KAAKpD,EAASqD,OA1EnB,IA0E6CC,QAAQpB,KAAIqB,GAChEpC,EAAAA,cAAA,UAAQqB,IAAKe,EAAS,EAAGT,QAASA,IAzCjB3C,EAyCgCoD,EAAS,IACrDA,EAAS,MAIjB,C","sources":["webpack://gatsby-starter-default/./src/pages/user-profile.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Layout from \"../components/layout\";\nimport { useUser } from \"../contexts/UserContext\";\nimport flightsData from \"../data/featuredFlights.json\"; // Assuming this is your flights data\n\nconst UserProfilePage = () => {\n    const { user, setUser } = useUser();\n    const [userInfo, setUserInfo] = useState(user || {});\n    const [wishlist, setWishlist] = useState(user?.wishlist || []);\n    const [currentPage, setCurrentPage] = useState(1);\n    const flightsPerPage = 3;\n\n    useEffect(() => {\n        // Update user data in local storage when wishlist changes\n        const updatedUser = { ...userInfo, wishlist };\n        setUser(updatedUser);\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n    }, [wishlist, userInfo, setUser]);\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setUserInfo({ ...userInfo, [name]: value });\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setUser(userInfo); // Update the user context\n        alert(\"Profile updated successfully!\");\n    };\n\n    const handleRemoveFromWishlist = (flightId) => {\n        setWishlist(wishlist.filter(id => id !== flightId));\n    };\n\n    // Get flight details from flights data\n    const getFlightDetails = (flightId) => {\n        return flightsData.flights.find(flight => flight.id === flightId);\n    };\n\n    // Pagination logic\n    const indexOfLastFlight = currentPage * flightsPerPage;\n    const indexOfFirstFlight = indexOfLastFlight - flightsPerPage;\n    const currentFlights = wishlist.slice(indexOfFirstFlight, indexOfLastFlight);\n\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n    return (\n        <Layout>\n            <h1>User Profile</h1>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"name\">Name:</label>\n                    <input id=\"name\" type=\"text\" name=\"name\" value={userInfo.name} onChange={handleInputChange} />\n                </div>\n                <div>\n                    <label htmlFor=\"email\">Email:</label>\n                    <input id=\"email\" type=\"email\" name=\"email\" value={userInfo.email} onChange={handleInputChange} />\n                </div>\n                <div>\n                    <label htmlFor=\"phone\">Phone:</label>\n                    <input id=\"phone\" type=\"tel\" name=\"phone\" value={userInfo.phone} onChange={handleInputChange} />\n                </div>\n                <div>\n                    <label  htmlFor=\"favoriteAirline\">Favorite Airline:</label>\n                    <input  id=\"favoriteAirline\" type=\"text\" name=\"favoriteAirline\" value={userInfo.favoriteAirline} onChange={handleInputChange} />\n                </div>\n                <button type=\"submit\">Save Changes</button>\n            </form>\n\n            <h2>My Wishlist</h2>\n            <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                {currentFlights.map(flightId => {\n                    const flight = getFlightDetails(flightId);\n                    return (\n                        <div key={flightId} style={{ flex: \"1 0 30%\", margin: \"10px\" }}>\n                            <p>{flight.airline} - {flight.departureTime} - ${flight.price}</p>\n                            <button onClick={() => handleRemoveFromWishlist(flightId)}>Remove</button>\n                        </div>\n                    );\n                })}\n            </div>\n\n            {/* Pagination */}\n            <div>\n                {[...Array(Math.ceil(wishlist.length / flightsPerPage)).keys()].map(number => (\n                    <button key={number + 1} onClick={() => paginate(number + 1)}>\n                        {number + 1}\n                    </button>\n                ))}\n            </div>\n        </Layout>\n    );\n};\n\nexport default UserProfilePage;\n"],"names":["UserProfilePage","user","setUser","useUser","userInfo","setUserInfo","useState","wishlist","setWishlist","currentPage","setCurrentPage","useEffect","updatedUser","localStorage","setItem","JSON","stringify","handleInputChange","event","name","value","target","indexOfLastFlight","indexOfFirstFlight","currentFlights","slice","React","Layout","onSubmit","preventDefault","alert","htmlFor","id","type","onChange","email","phone","favoriteAirline","style","display","flexWrap","map","flightId","flight","flightsData","find","getFlightDetails","key","flex","margin","airline","departureTime","price","onClick","filter","handleRemoveFromWishlist","_toConsumableArray","Array","Math","ceil","length","keys","number"],"sourceRoot":""}
(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))s(t);new MutationObserver(t=>{for(const o of t)if(o.type==="childList")for(const c of o.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&s(c)}).observe(document,{childList:!0,subtree:!0});function i(t){const o={};return t.integrity&&(o.integrity=t.integrity),t.referrerPolicy&&(o.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?o.credentials="include":t.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(t){if(t.ep)return;t.ep=!0;const o=i(t);fetch(t.href,o)}})();const d="ws://localhost:8808",h=[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"}],f=16*1024*1024,r=16*1024;class u{constructor(e=500,i=3e4){this.min=e,this.max=i,this.attempt=0}delay(){const e=Math.min(this.max,this.min*2**this.attempt);return console.debug("[Backoff] delay =",e),this.attempt++,e}reset(){console.debug("[Backoff] reset"),this.attempt=0}}async function a(n){const e=await crypto.subtle.digest("SHA-256",n);return Array.from(new Uint8Array(e)).map(i=>i.toString(16).padStart(2,"0")).join("")}class l{constructor(){this.backoff=new u,this.socket=null,this.pc=null,this.dc=null,this.makingOffer=!1,this._pendingCandidates=[],this.fileQueue=[],this.currentFile=null,this.acks={},this.receiveBuffer=[],this.recvFileName="",this.expectedSize=0,this.expectedHash="",this.offset=0,this.setupUI(),this.installTeardownHook()}setupUI(){this.roomForm=document.getElementById("room-form"),this.roomInput=document.getElementById("room-input"),this.fileInput=document.getElementById("file-input"),this.fileList=document.getElementById("file-list"),this.peerList=document.getElementById("peer-list"),this.roomForm.addEventListener("submit",e=>{e.preventDefault();const i=this.roomInput.value.trim();console.debug("[UI] joinRoom ->",i),i&&this.joinRoom(i)}),this.fileInput.addEventListener("change",e=>{console.debug("[UI] files selected:",e.target.files),this.enqueueFiles(e.target.files)})}installTeardownHook(){window.addEventListener("beforeunload",()=>{console.debug("[Lifecycle] beforeunload, closing"),this.close()})}joinRoom(e){this.room=e,console.debug("[Signal] joinRoom",e),this.connect()}connect(){const e=encodeURIComponent(localStorage.getItem("ft_key")),i=`${d}/?token=${e}`;console.debug("[Signal] connecting to",i),this.socket=new WebSocket(i),this.socket.onopen=()=>{console.debug("[Signal] WS open, resetting backoff"),this.backoff.reset(),this.send({type:"join",room:this.room})},this.socket.onmessage=s=>{console.debug("[Signal] WS message",s.data),this.onWS(s)},this.socket.onerror=s=>console.error("[Signal] WS error",s),this.socket.onclose=()=>{console.debug("[Signal] WS closed, retry in backoff"),setTimeout(()=>this.connect(),this.backoff.delay())}}send(e){console.debug("[Signal] send",e),this.socket.send(JSON.stringify(e))}onWS(e){if(typeof e.data=="string"){let i;try{i=JSON.parse(e.data)}catch{console.warn("[Signal] invalid JSON",e.data);return}this.handleSignaling(i)}}handleSignaling(e){switch(console.debug("[Signal] handleSignaling",e),e.type){case"welcome":console.info("[Signal] welcome user=",e.user);return;case"joined":console.info("[Signal] joined room=",e.room),this.setupPeer();return;case"signal":this.onSignal(e);return;case"error":console.error("[Signal] error",e.code||e.message),alert(`Error: ${e.code||e.message}`);return}}setupPeer(){console.debug("[Peer] setupPeer"),this.pc=new RTCPeerConnection({iceServers:h}),this.pc.onicecandidate=e=>{e.candidate&&(console.debug("[Peer] local ICE candidate",e.candidate),this.send({type:"signal",room:this.room,candidate:e.candidate}))},this.pc.onnegotiationneeded=async()=>{console.debug("[Peer] onnegotiationneeded"),this.makingOffer=!0;const e=await this.pc.createOffer();await this.pc.setLocalDescription(e),console.debug("[Peer] sending offer",e),this.send({type:"signal",room:this.room,description:this.pc.localDescription}),this.makingOffer=!1},this.pc.oniceconnectionstatechange=()=>{console.debug("[Peer] ICE state",this.pc.iceConnectionState),this.pc.iceConnectionState==="failed"&&(console.warn("[Peer] ICE failed, restarting"),this.pc.restartIce().catch(console.error))},this.pc.ondatachannel=e=>{console.debug("[Peer] incoming DataChannel",e.channel.label),this.setupDC(e.channel)},this.dc=this.pc.createDataChannel("file"),console.debug("[Peer] created DataChannel"),this.setupDC(this.dc)}async onSignal(e){if(console.debug("[Peer] onSignal",e),e.description){const i=e.description.type==="offer";if(i&&(this.makingOffer||this.pc.signalingState!=="stable")&&(console.warn("[Peer] collision, rolling back"),await this.pc.setLocalDescription({type:"rollback"})),await this.pc.setRemoteDescription(e.description),i){console.debug("[Peer] creating answer");const t=await this.pc.createAnswer();await this.pc.setLocalDescription(t),console.debug("[Peer] sending answer",t),this.send({type:"signal",room:this.room,description:this.pc.localDescription})}this._pendingCandidates.forEach(t=>{console.debug("[Peer] draining candidate",t),this.pc.addIceCandidate(t).catch(console.error)}),this._pendingCandidates=[]}else e.candidate&&(this.pc.remoteDescription&&this.pc.remoteDescription.type?(console.debug("[Peer] addIceCandidate",e.candidate),await this.pc.addIceCandidate(e.candidate).catch(console.error)):(console.debug("[Peer] queueing candidate",e.candidate),this._pendingCandidates.push(e.candidate)))}setupDC(e){console.debug("[DC] setup",e.label),this.dc=e,e.binaryType="arraybuffer",e.bufferedAmountLowThreshold=f,e.onopen=()=>{console.info("[DC] open"),this.flushQueue()},e.onbufferedamountlow=()=>{console.info("[DC] bufferedAmountLow"),this.flushQueue()},e.onmessage=i=>{console.debug("[DC] message",i.data),this.handleDCMessage(i.data)}}handleDCMessage(e){var i,s;if(typeof e=="string"){const t=JSON.parse(e);console.debug("[DC] control",t),t.type==="meta"?(this.recvFileName=t.fileName,this.expectedSize=t.fileSize,this.expectedHash=t.hash,this.receiveBuffer=[],this.offset=0,console.info("[File] meta received",t.fileName,t.fileSize)):t.type==="chunk"?(console.debug("[File] sending ack for",t.offset),this.dc.send(JSON.stringify({type:"ack",offset:t.offset}))):t.type==="ack"&&(console.debug("[File] ack received for",t.offset),(s=(i=this.acks)[t.offset])==null||s.call(i),delete this.acks[t.offset])}else this.receiveBuffer.push(e),this.offset+=e.byteLength,console.debug("[File] data chunk received, offset=",this.offset),this.offset>=this.expectedSize&&this.finishReceive()}enqueueFiles(e){for(const i of e)this.fileQueue.push(i);this.fileList.innerHTML="";for(const i of this.fileQueue){const s=document.createElement("li");s.textContent=i.name,this.fileList.appendChild(s)}console.info("[File] queue updated, count=",this.fileQueue.length),this.flushQueue()}async flushQueue(){if(!this.dc||this.dc.readyState!=="open"||this.currentFile||!this.fileQueue.length)return;this.currentFile=this.fileQueue.shift(),console.info("[File] sending",this.currentFile.name);const e=await this.currentFile.arrayBuffer(),i=await a(e);this.dc.send(JSON.stringify({type:"meta",fileName:this.currentFile.name,fileSize:e.byteLength,hash:i}));for(let s=0;s<e.byteLength;s+=r){const t=e.slice(s,s+r);console.debug("[File] send chunk offset=",s),this.dc.send(JSON.stringify({type:"chunk",offset:s})),this.dc.send(t),await new Promise(o=>{this.acks[s]=o})}console.info("[File] send complete",this.currentFile.name),this.currentFile=null}async finishReceive(){console.info("[File] finishing receive",this.recvFileName);const e=new Blob(this.receiveBuffer),i=await a(await e.arrayBuffer());if(i===this.expectedHash){console.info("[File] hash match, creating download link");const s=URL.createObjectURL(e),t=document.createElement("a");t.href=s,t.download=this.recvFileName,t.textContent=`Download ${this.recvFileName}`,this.peerList.appendChild(t)}else console.error("[File] hash mismatch",i,this.expectedHash)}close(){var e,i;console.debug("[Lifecycle] close"),(e=this.socket)==null||e.close(),(i=this.pc)==null||i.close()}}window.addEventListener("DOMContentLoaded",()=>{if(!localStorage.getItem("ft_key")){const n=prompt("Enter key");n&&(console.debug("[Auth] key stored"),localStorage.setItem("ft_key",n))}new l});l();

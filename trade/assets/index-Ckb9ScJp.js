(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))d(t);new MutationObserver(t=>{for(const i of t)if(i.type==="childList")for(const l of i.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&d(l)}).observe(document,{childList:!0,subtree:!0});function s(t){const i={};return t.integrity&&(i.integrity=t.integrity),t.referrerPolicy&&(i.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?i.credentials="include":t.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function d(t){if(t.ep)return;t.ep=!0;const i=s(t);fetch(t.href,i)}})();const O="wss://relay.drobilica.com:8080",P="turn:relay.drobilica.com:3478",F="forky",x="3kerQa28CjgX",$={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:P,username:F,credential:x}]},N={ordered:!0,maxRetransmits:0},h=16384,k=4e3,J=document.getElementById("generateRoomBtn"),U=document.getElementById("roomCode"),T=document.getElementById("copyRoomUrlBtn"),j=document.getElementById("copyRoomIdBtn"),z=document.getElementById("joinRoomInput"),A=document.getElementById("joinRoomBtn"),M=document.getElementById("yourFileInput"),W=document.getElementById("yourFiles"),q=document.getElementById("theirFiles"),b=document.getElementById("roomDisplay"),w=document.getElementById("uploadProgressContainer"),_=document.getElementById("uploadProgress"),G=document.getElementById("uploadProgressPercent");let n=null,c=null,a=null,r=null,g=[],C=0,u=[];function B(){a&&a.close(),a=new WebSocket(O),a.onopen=()=>{console.log("WebSocket connected"),a.send(JSON.stringify({type:"join",room:r})),console.log(`Joined room: ${r}`),y()},a.onmessage=async e=>{let o;try{const s=await e.data.text();o=JSON.parse(s)}catch(s){console.error("Failed to parse message as JSON:",e.data),console.error(s);return}if(o.room!==r){console.log(`Ignoring message for room ${o.room}`);return}o.type==="offer"?await Q(o.offer):o.type==="answer"?await H(o.answer):o.type==="candidate"&&X(o.candidate)},a.onerror=e=>{console.error("WebSocket error:",e)},a.onclose=()=>{console.log("WebSocket closed")}}function y(){n&&n.close(),console.log("Initializing peer connection"),n=new RTCPeerConnection($),c=n.createDataChannel("fileTransfer",N),I(),n.ondatachannel=e=>{c=e.channel,I()},n.onicecandidate=e=>{e.candidate&&a.send(JSON.stringify({type:"candidate",candidate:e.candidate,room:r}))},L()}function I(){c.onopen=()=>{for(console.log("Data channel open");g.length>0;){const e=g.shift();ne(e)}},c.onclose=()=>{console.log("Data channel closed"),R()},c.onerror=e=>{console.error("Data channel error:",e),R()},c.onmessage=K}function R(){c.readyState!=="open"&&(console.log("Retrying data channel..."),y())}function K(e){const o=JSON.parse(e.data);o.type==="file"&&Y(o)}async function L(){try{const e=await n.createOffer();await n.setLocalDescription(e),a.send(JSON.stringify({type:"offer",offer:n.localDescription,room:r}))}catch(e){console.error("Error creating offer:",e),setTimeout(L,1e3)}}async function Q(e){n||y();try{n.signalingState!=="stable"&&(console.warn("Peer connection state is not stable, resetting..."),await n.setLocalDescription({type:"rollback"})),await n.setRemoteDescription(new RTCSessionDescription(e));const o=await n.createAnswer();for(await n.setLocalDescription(o),a.send(JSON.stringify({type:"answer",answer:n.localDescription,room:r}));u.length>0;)await n.addIceCandidate(u.shift())}catch(o){console.error("Error handling offer:",o)}}async function H(e){try{if(n.signalingState==="have-local-offer")for(await n.setRemoteDescription(new RTCSessionDescription(e));u.length>0;)await n.addIceCandidate(u.shift());else console.warn("Received answer in unexpected state:",n.signalingState)}catch(o){console.error("Error handling answer:",o)}}function X(e){n.remoteDescription&&n.remoteDescription.type?n.addIceCandidate(new RTCIceCandidate(e)).catch(o=>{console.error("Error adding received ICE candidate",o)}):(console.log("Queueing candidate until remote description is set"),u.push(e))}function Z(e){const o=e.target.files[0];V(o)}function V(e){const o=new FileReader;let s=0;w.classList.remove("hidden"),S(0),v({name:e.name,data:""},W,!0),o.onload=()=>{if(c&&c.readyState==="open"){const t=o.result;c.send(JSON.stringify({type:"file",name:e.name,chunk:t,size:e.size,room:r})),s+=h,S(Math.min(s/e.size*100,100)),s<e.size?d(s):(console.log("File sent successfully"),w.classList.add("hidden"))}else console.log("Data channel is not open, queuing file"),g.push({file:e,offset:s})};function d(t){const i=e.slice(t,t+h);o.readAsArrayBuffer(i)}d(0)}function S(e){_.value=e,G.textContent=`${e.toFixed(2)}%`}let m=[],f="";function Y(e){if(f||(f=e.name),e.room!==r){console.log(`Ignoring file not intended for this room. Current room: ${r}, message room: ${e.room}`);return}if(m.push(e.chunk),m.length*h>=e.size){const o=new Blob(m);v({name:f,data:URL.createObjectURL(o)},q),m=[],f=""}}function v(e,o,s){if(Array.from(o.children).find(l=>l.textContent.includes(e.name)))return;const t=document.createElement("li"),i=document.createElement("a");if(i.href=e.data||"#",i.download=e.name,i.textContent=e.name,t.appendChild(i),o.appendChild(t),!s){const l=document.createElement("button");l.textContent="Download",l.className="bg-blue-500 text-white px-2 py-1 rounded ml-2",l.addEventListener("click",()=>{const p=document.createElement("a");p.href=e.data,p.download=e.name,p.click()}),t.appendChild(l)}}function ee(){b.textContent=`Joined Room: ${r}`;const e=`${window.location.origin}/trade?room=${r}`;navigator.clipboard.writeText(e).then(()=>console.log("Room URL copied!")),console.log(`Copied room URL: ${e}`)}function D(e){console.log(`Joining room: ${e}`),b.textContent=`Joined Room: ${e}`,B()}J.addEventListener("click",()=>{const e=Date.now();e-C>=k?(n&&(n.close(),n=null),a&&(a.close(),a=null),r=Math.random().toString(36).substring(2,10),U.value=r,console.log(`Generated room: ${r}`),ee(),B(),C=e):console.log("Please wait before generating a new room.")});T.addEventListener("click",()=>{const e=`${window.location.origin}/trade?room=${r}`;navigator.clipboard.writeText(e).then(()=>console.log("Room URL copied!")),console.log(`Copied room URL: ${e}`)});j.addEventListener("click",()=>{navigator.clipboard.writeText(r).then(()=>console.log("Room ID copied!")),console.log(`Copied room ID: ${r}`)});A.addEventListener("click",()=>{const e=z.value.trim();e&&(r=e,D(r))});M.addEventListener("change",Z);const oe=new URLSearchParams(window.location.search),E=oe.get("room");E&&(r=E,D(r));function ne(e){c&&c.readyState==="open"?c.send(JSON.stringify(e)):(console.log("Data channel is not open, queuing file"),g.push(e))}

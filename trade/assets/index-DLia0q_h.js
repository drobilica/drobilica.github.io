(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))a(t);new MutationObserver(t=>{for(const r of t)if(r.type==="childList")for(const d of r.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&a(d)}).observe(document,{childList:!0,subtree:!0});function n(t){const r={};return t.integrity&&(r.integrity=t.integrity),t.referrerPolicy&&(r.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?r.credentials="include":t.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(t){if(t.ep)return;t.ep=!0;const r=n(t);fetch(t.href,r)}})();const h="wss://relay.drobilica.com:8080",R="__TURN_SERVER_URL__",E="__TURN_USERNAME__",w="__TURN_CREDENTIAL__",S={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:R,username:E,credential:w}]},C=document.getElementById("generateRoomBtn"),i=document.getElementById("roomCode"),b=document.getElementById("copyRoomUrlBtn"),I=document.getElementById("copyRoomIdBtn"),B=document.getElementById("joinRoomInput"),D=document.getElementById("joinRoomBtn"),L=document.getElementById("yourFileInput"),v=document.getElementById("yourFiles"),f=document.getElementById("theirFiles"),N=document.getElementById("roomDisplay");let s,c,l,m=[];C.addEventListener("click",()=>{const o=Math.random().toString(36).substring(2,10);i.value=o,console.log(`Generated room: ${o}`),p(o)});b.addEventListener("click",()=>{const o=`${window.location.origin}/trade?room=${i.value}`;navigator.clipboard.writeText(o).then(()=>console.log("Room URL copied!")),console.log(`Copied room URL: ${o}`)});I.addEventListener("click",()=>{navigator.clipboard.writeText(i.value).then(()=>console.log("Room ID copied!")),console.log(`Copied room ID: ${i.value}`)});D.addEventListener("click",()=>{const o=B.value.trim();o&&p(o)});L.addEventListener("change",o=>{Array.from(o.target.files).forEach(n=>{g(v,n),c&&c.readyState==="open"?y(n):(console.log(`Data channel is not open (state: ${c?c.readyState:"undefined"}), queuing file metadata`),m.push(n))})});function g(o,e){const n=document.createElement("li");n.textContent=e.name,n.className="border-b py-2";const a=document.createElement("button");a.textContent="Download",a.className="bg-blue-500 text-white px-2 py-1 rounded ml-2",a.addEventListener("click",()=>{const t=URL.createObjectURL(e),r=document.createElement("a");r.href=t,r.download=e.name,r.click()}),n.appendChild(a),o.appendChild(n),console.log(`Added file to list: ${e.name}`)}function y(o){const e={type:"file-metadata",name:o.name,size:o.size};c&&c.readyState==="open"?(c.send(JSON.stringify(e)),console.log("Sent file metadata:",e)):console.log(`Data channel is not open (state: ${c?c.readyState:"undefined"}), cannot send file metadata`)}function p(o){console.log(`Joining room: ${o}`),N.textContent=`Joined Room: ${o}`,l=new WebSocket(h),l.onopen=()=>{l.send(JSON.stringify({type:"join",room:o})),console.log(`Connected to WebSocket and joined room: ${o}`)},l.onmessage=async e=>{const n=await e.data.text(),a=JSON.parse(n);switch(console.log(`Received WebSocket message: ${JSON.stringify(a)}`),a.type){case"offer":U(a.offer);break;case"answer":_(a.answer);break;case"candidate":O(a.candidate);break;case"join":console.log(`A new client joined the room: ${a.room}`);break;default:console.log(`Unhandled WebSocket message type: ${a.type}`)}},l.onerror=e=>{console.error("WebSocket error:",e)},s=new RTCPeerConnection(S),c=s.createDataChannel("fileTransfer"),console.log("Created data channel:",c),c.onopen=()=>{console.log("Data channel open"),m.forEach(e=>y(e)),m=[]},c.onclose=()=>console.log("Data channel closed"),c.onerror=e=>console.error("Data channel error:",e),c.onmessage=$,s.onicecandidate=e=>{e.candidate&&(l.send(JSON.stringify({type:"candidate",candidate:e.candidate,room:o})),console.log("Sent ICE candidate:",e.candidate))}}function U(o){console.log("Handling offer:",o),s.setRemoteDescription(new RTCSessionDescription(o)).then(()=>s.createAnswer()).then(e=>s.setLocalDescription(e)).then(()=>{l.send(JSON.stringify({type:"answer",answer:s.localDescription,room:u})),console.log("Sent answer:",s.localDescription)}).catch(e=>{console.error("Error handling offer:",e)})}function _(o){console.log("Handling answer:",o),s.setRemoteDescription(new RTCSessionDescription(o)).catch(e=>{console.error("Error setting remote description:",e)}),console.log("Remote description set:",o)}function O(o){console.log("Handling candidate:",o),s.addIceCandidate(new RTCIceCandidate(o)).catch(e=>{console.error("Error adding ICE candidate:",e)}),console.log("Added ICE candidate:",o)}function $(o){console.log("Received data channel message:",o.data);const e=JSON.parse(o.data);if(e.type==="file-metadata"){const n={name:e.name,size:e.size};console.log("Received file metadata:",n),g(f,n)}else if(e.type==="file-data"){const n=new Blob([e.data]);g(f,new File([n],e.name)),console.log("Received file data:",e.name)}else console.log(`Unhandled data channel message type: ${e.type}`)}const T=new URLSearchParams(window.location.search),u=T.get("room");u&&p(u);

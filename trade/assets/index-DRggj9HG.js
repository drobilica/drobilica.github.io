(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))r(t);new MutationObserver(t=>{for(const c of t)if(c.type==="childList")for(const m of c.addedNodes)m.tagName==="LINK"&&m.rel==="modulepreload"&&r(m)}).observe(document,{childList:!0,subtree:!0});function a(t){const c={};return t.integrity&&(c.integrity=t.integrity),t.referrerPolicy&&(c.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?c.credentials="include":t.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function r(t){if(t.ep)return;t.ep=!0;const c=a(t);fetch(t.href,c)}})();const R="wss://relay.drobilica.com:8080",E="__TURN_SERVER_URL__",S="__TURN_USERNAME__",w="__TURN_CREDENTIAL__",C={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:E,username:S,credential:w}]},D=document.getElementById("generateRoomBtn"),i=document.getElementById("roomCode"),b=document.getElementById("copyRoomUrlBtn"),I=document.getElementById("copyRoomIdBtn"),v=document.getElementById("joinRoomInput"),L=document.getElementById("joinRoomBtn"),B=document.getElementById("yourFileInput"),N=document.getElementById("yourFiles"),f=document.getElementById("theirFiles"),O=document.getElementById("roomDisplay");let s,n,l,d=[];D.addEventListener("click",()=>{const e=Math.random().toString(36).substring(2,10);i.value=e,console.log(`Generated room: ${e}`),g(e)});b.addEventListener("click",()=>{const e=`${window.location.origin}/trade?room=${i.value}`;navigator.clipboard.writeText(e).then(()=>console.log("Room URL copied!")),console.log(`Copied room URL: ${e}`)});I.addEventListener("click",()=>{navigator.clipboard.writeText(i.value).then(()=>console.log("Room ID copied!")),console.log(`Copied room ID: ${i.value}`)});L.addEventListener("click",()=>{const e=v.value.trim();e&&g(e)});B.addEventListener("change",e=>{Array.from(e.target.files).forEach(a=>{u(N,a),U(a)})});function u(e,o){const a=document.createElement("li");a.textContent=o.name,a.className="border-b py-2";const r=document.createElement("button");r.textContent="Download",r.className="bg-blue-500 text-white px-2 py-1 rounded ml-2",r.addEventListener("click",()=>{const t=URL.createObjectURL(o),c=document.createElement("a");c.href=t,c.download=o.name,c.click()}),a.appendChild(r),e.appendChild(a),console.log(`Added file to list: ${o.name}`)}function U(e){const o={type:"file-metadata",name:e.name,size:e.size};n&&n.readyState==="open"?(n.send(JSON.stringify(o)),console.log("Sent file metadata:",o)):(console.log(`Data channel is not open (state: ${n?n.readyState:"undefined"}), queuing file metadata`),d.push(o))}function g(e){console.log(`Joining room: ${e}`),O.textContent=`Joined Room: ${e}`,l=new WebSocket(R),l.onopen=()=>{l.send(JSON.stringify({type:"join",room:e})),console.log(`Connected to WebSocket and joined room: ${e}`)},l.onmessage=async o=>{const a=await o.data.text(),r=JSON.parse(a);switch(console.log(`Received WebSocket message: ${JSON.stringify(r)}`),r.type){case"offer":_(r.offer);break;case"answer":$(r.answer);break;case"candidate":J(r.candidate);break;case"join":console.log(`A new client joined the room: ${r.room}`),p();break;default:console.log(`Unhandled WebSocket message type: ${r.type}`)}},l.onerror=o=>{console.error("WebSocket error:",o)},p()}function p(){s=new RTCPeerConnection(C),n=s.createDataChannel("fileTransfer"),console.log("Created data channel:",n),n.onopen=()=>{console.log("Data channel open"),d.forEach(e=>{n.send(JSON.stringify(e)),console.log("Sent queued file metadata:",e)}),d=[]},n.onclose=()=>console.log("Data channel closed"),n.onerror=e=>console.error("Data channel error:",e),n.onmessage=y,s.onicecandidate=e=>{e.candidate&&(l.send(JSON.stringify({type:"candidate",candidate:e.candidate,room:i.value})),console.log("Sent ICE candidate:",e.candidate))},s.ondatachannel=e=>{console.log("Data channel received:",e.channel),n=e.channel,T()},i.value&&s.createOffer().then(e=>s.setLocalDescription(e)).then(()=>{l.send(JSON.stringify({type:"offer",offer:s.localDescription,room:i.value})),console.log("Sent offer:",s.localDescription)}).catch(e=>{console.error("Error creating offer:",e)})}function _(e){console.log("Handling offer:",e),s.setRemoteDescription(new RTCSessionDescription(e)).then(()=>s.createAnswer()).then(o=>s.setLocalDescription(o)).then(()=>{l.send(JSON.stringify({type:"answer",answer:s.localDescription,room:i.value})),console.log("Sent answer:",s.localDescription)}).catch(o=>{console.error("Error handling offer:",o)})}function $(e){console.log("Handling answer:",e),s.setRemoteDescription(new RTCSessionDescription(e)).catch(o=>{console.error("Error setting remote description:",o)}),console.log("Remote description set:",e)}function J(e){console.log("Handling candidate:",e),s.addIceCandidate(new RTCIceCandidate(e)).catch(o=>{console.error("Error adding ICE candidate:",o)}),console.log("Added ICE candidate:",e)}function T(){n.onopen=()=>{console.log("Data channel open"),d.forEach(e=>{n.send(JSON.stringify(e)),console.log("Sent queued file metadata:",e)}),d=[]},n.onclose=()=>console.log("Data channel closed"),n.onerror=e=>console.error("Data channel error:",e),n.onmessage=y}function y(e){console.log("Received data channel message:",e.data);const o=JSON.parse(e.data);if(o.type==="file-metadata"){const a={name:o.name,size:o.size};console.log("Received file metadata:",a),u(f,a)}else if(o.type==="file-data"){const a=new Blob([o.data]);u(f,new File([a],o.name)),console.log("Received file data:",o.name)}else console.log(`Unhandled data channel message type: ${o.type}`)}const k=new URLSearchParams(window.location.search),h=k.get("room");h&&g(h);
